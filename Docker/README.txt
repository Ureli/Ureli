Мой проект в docker and docker-compose

Задача:
На выделенном сервере с Ubuntu 18 или 20 
- Установить Docker, Docker Compose.
- Зарегистрировать домен на IP сервере.
- Сделать контейнер с Nginx, который будет для домена отдавать веб-сайт (в качестве сайта простенькая html страничка). 
- Подключить SSL сертификат на домен от Let's Encrypt с механизмом автопродления. 
- Настроить периодические бэкапы папки с сайтом (т.к. воображаемый разработчик будет его обновлять) 
- Структурно для докера сделать так, чтобы можно было легко переносить между серверами (т.е. в одной корневой папке) 

Выполнение:

1. Создал сервер с белым  IP на Yandex.Cloud под управлением Ubuntu 20.04 LTS, установил docker and docker-compose на сревере.
2. Купил доменное имя на сайте https://www.freenom.com .
3. Добавил DNS записи в Yandex.Cloud о своем домене, прописал на сайте Freenom в смоем домене имя сервера полученное из Yandex.Cloud и IP адрес сервера (белый) 
4. На сервере создал рабочую директорию и сконфигурировал Dockerfile в котором прописал запуск nginx:latest перенос index.html файла и открытие 80 порта на котором работает nginx. Проверил работоспособность Dockerfile когда перешел по ip адресу сервера получил в выводе содержимое .html файла.
5. Создал docker-compose.yml файл в котором два сервиса. 
Первый отвечает за запуск веб-сервиса по средством Dockerfile и указал следующие имена томов и связанных монтируемых образов:
web-root:/var/www/html - добавлять статические активы нашего сайта, скопированные в том web-root, в директорию /var/www/html на контейнере.
./nginx_conf:/etc/nginx/conf.d - монтирует директорию конфигурации Nginx на хост в соответствующую директорию в контейнере, гарантируя, что любые изменения, которые вносим в файлы на хосте, будут отражены в контейнере.
./html:/usr/share/nginx/html - монтировать директорию визуализации Nginx на хост в соответствующую директорию в контейнере, гарантируя, что любые изменения, которые вносим в файлы на хосте, будут отражены в контейнере.
certbot-etc:/etc/letsencrypt - монтирует соответствующие сертификаты и ключи Let’s Encrypt для моего домена в соответствующую директорию контейнера.
certbot-var:/var/lib/letsencrypt - монтирует используемую по умолчанию рабочую директорию Let’s Encrypt в соответствующую директорию контейнера.
Второй сервис извлекает образ certbot/certbot из Docker Hub. Также он использует имена томов для обмена ресурсами с контейнером Nginx, включая доменные сертификаты и ключ в certbot-etc, рабочую директорию Let’s Encrypt в certbot-var и код приложения в web-root. Использовал depends_on, чтобы указать, что контейнер certbot следует запускать только после запуска службы Nginx (если не указать depends_on то контейнер cerbot может запуститься быстрее Nginx и поличится ошибка). В качестве заключительного шага добавил определения тома и сети.
6. Протестировал получение сертификатов запустив .yml файл и получив первые сертификаты для своего домена.
7. Создал файл dhparam.pem в который сгенерировал ключ для соершенно прямой секретности (создал группу Diffie-Hellman). Изменил nginx.conf файл для перенаправления запросов с http на https, добавил данные о Diffie-Hellman и добавления учетных данных, протоколов и заголовков безопасности SSL.
8. Внес соответствующие изменения в docker-compose.yml, добавил 443 распределение портов и том с именем dhparam (для Nginx), так же внес dhparam в определение томов.  
9. Проверил работу перенаправления портов и перешел на домен по https.
10. Создал скрипт ssl_renew.sh который будет обновлять SSL сертификаты для моего домена. Через crontab поставил исполнение скрипта каждые 25 дней.
11. Создал скрипт backuphtml.sh который создает в директории backup сжатый архив моей странички index.html. Через crintab поставил исполнение того скрипта каждые 3 часа.



















 


