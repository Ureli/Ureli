		 Курс по Python 3*	
 
			строки
print(name) - вывести содержимое name
print(name.title()) - вывести содержимое name но сделать первоначальные буквы заглавными
name.upper - сделать все буквы заглавными файла name
name.lower - сделать все буквы строчными файла name
\n - делает Enter
\t - делает Tab
name.rstrip() - отрезать пробелы справа
name.lstrip() - отрезать пробелы слева
name.strip()  - отрезать пробелы справа и слева в () пишем удаление символа .,-\
			номера
работает как на инжинерном калькуляторе
			
			работа с циклами
for x in range (0, 5+1,  2)
   print(x)    (от, до, шаг)
   if x == 4:  как только х = 4 тогда ->
     break     -> прервать 		
напишет х как 0 1 2 3 4 (5 значений x от 0) для того что бы последней была искомая цифра необходимо в скобках дописать +1
while True:  выполнять пока
   print(x)   пишется х
   x = x +1   добавлять к х 1
   if x == 20: как только х =20 
      break    закончить

			Массивы ч1
cities = ['город1', 'город2', 'город3', 'город4', 'город5']		
print(len(cities))  напечатать количество  
print(cities[0])   напечатать самый первый
print(cities[-2]) напечатать второй с конца
print(cities[2].upper)  напечатать третий по счету город
cities.append('Kursk')  добавить в конце
cities.insert (1, 'Город') добавить в любое место
del cities[-1] удалить первый с конца
cities.remove('город') одалить определенный город

			 Массивы ч2
str(max(file.name)) - найти максимальное значение в цифрах файла
str(min(file.name)) - найти минимальное значение в цифрах файла 
str(sum(file.name)) - найти сумму цифр файла 
file.name = ['a', 'b', 'c', 'e', 'r']
file.name1 = file.name[1:4] - выбрать начения для файла1 из файла с 1 4 шт но 4 не учитывается


			Условные операторы
переменная = 30

if переменная <= 4: если переменая меньше либо равна 4
   print("текст")   то распечатать текст. а если не равна то идем дальше
elif (переменная > 4) and (переменная < 12): если переменная больше 4 и меньше 12 то 
   print("text")  распечатать текст. если же нет то идем дальше
else:    если переменная не подходит ни к одному условию то
   print("text") распечатать текст


			Словари ч1
словарь = qwer
словарь = {            создается словарь в котором есть два наименования
   	    key: value,
	    ключ: значение,
 	    'здоровье': 100,
}			

qwer['цвет.здоровье'] = 'зеленый' добавить в словать (может быть цифра) 
del qwer['ключь'] удалить из словаря
qwer['здоровье'] = qwer['здоровье'] - 40 изменить здоровье на -40 от начального
qwer['цвет.здоровье'] = qwer['цвет.здоровье'] 'оранжевый' изменить цвет здоровье на оранжевый
if qwer['здоровье'] < 80:
   qwer['цвет.здоровье'] = 'синий'

print(qwer.keys()) - вывести строкой ключи
print(qwer.values()) -  вывести строкой значения


			Словари ч2
есть qwer = {
		'': ''
		'': ''
		'': ''
}

qwe = [] создается массив пустой

for x in range(0, 10): создается в пустом маcсиве
   qwe.append(qwer.coppy())  10 копий qwer словаря  

qwe[5]['здоровье'] = 30   изменить в массиве qwe пятому параметр здоровье на 30 		
qwe[6]['локация'] = +=12   изменить в массиве 6-му параметр локация на +12 от начального

for y in qwe:   для вывода информации в столбик
   print(y) 


1 Расскажите о последней интересной и сложной задаче, которую вам приходилось решать.

Последней интересной задачей для меня было прохождение тестового задания на вакансию инженера технической поддержки, суть задания заключалась в выводе необходимой информации по средством командной строки линукс, без использования дополнительных утилит. Не скажу что было очень сложно, а вот что интересно было это точно.

2 Представьте себе веб-сервис c аудиторией в 100 тысяч пользователей в сутки, состоящий из фронтенда (nginx) и бэкенда (MySQL). Расскажите, как вы организуете мониторинг этого сервиса, какие инструменты будете использовать, на какие показатели будете обращать внимание и почему.

1. Для мониторинга веб-сервиса я сделаю следующее:
    1.1 Создам шаблон для мониторинга сервиса
    1.2 Настрою сценарий проверки
    1.3 Создам графики с данными
    1.4 Добавлю триггеры на проверку доступности и скорости загрузки сервиса
2. В качестве инструмента я воспользуюсь таким приложением как Zabbix, с его помощью можно добавить веб-сервис к удобному и привычному в восприятии мониторингу, добавить необходимые сценарии проверки и просмотра результата.
3. Показатели на которые буду обращать внимание это:
    3.1 доступность сервиса - для проверки все ли пользователи могут попасть на веб-сервис.
    3.2 время ответа веб-сервиса в миллисекундах - для понимания работоспособности сервиса.
    3.3 скорость доступа к веб-сервису -  для максимального уменьшения этого времени, что бы пользователи не чувствовали дискомфорт.
    3.4 работа авторизации веб-сервиса - для проверки нет ли у пользователей проблем с получением доступа к сервису.
    3.5 аллерты (важная составляющая любого мониторинга, необходимо незамедлительно получать информацию о ошибках связанных с веб-сервисом).
    
3 В пятницу вечером в бекенде (MySQL) обнаружена серьезная уязвимость. Каковы будут ваши действия?

Сделать откат в предыдущей рабочей версии, потому как на выходных никто не работает а пользователю необходим доступ к ресурсу.
   
    
4 	

Вам нужно тиражировать конфигурацию на 10 разных кластеров. Различия между конфигурациями минимальны. Как вы решите эту задачу? Как вы будете хранить конфигурацию? Как будут описаны различия между конфигурациями? Как на конкретные кластеры будут доставляться индивидуальные конфигурации?


1. Для решения задачи воспользуюсь k8s и Helm Charts. необходимо прописать конфигурацию в .yaml файлах в количестве 10, если для каждого кластера содержимое конфигурации отлично, в случае повторов конфигурации для нескольких кластеров можно поставить необходимое количество копий (реплик) и за деплоить через helm charts.
2. Для хранения исходника использую архив и бэкап.
3. Различия можно прописать через lable в файле deployments.yaml
4. Для добавления индивидуальных конфигураций на конкретные кластеры воспользуюсь командой helm upgrade (и далее на каком кластере и что изменить)








Тестовое задание DevOps Seven Winds Studio


На выделенном сервере с Ubuntu 18 или 20 
- Установить Docker, Docker Compose 
- Зарегистрировать домен на IP сервера (https://my.freenom.com/ вполне устроит) 
- Сделать контейнер с Nginx, который будет для домена отдавать веб-сайт (в качестве сайта достаточно простенькой html странички "Hello world!") 
- Подключить SSL сертификат на домен от Let's Encrypt с механизмом автопродления 

- Настроить периодические бэкапы папки с сайтом (т.к. воображаемый разработчик будет его обновлять) 
- Структурно для докера сделать так, чтобы можно было легко переносить между серверами (т.е. в одной корневой папке) 

Что показывать: 
- Урл на сайт, чтобы можно проверить подключение домена и работу через https - Архив папки с проектом (конфигурация для Docker Compose, Nginx, файлы и т.п) 
- Краткое описание как были реализованы задачи (через какие инструменты организованы бэкапы, продление сертификатов и т.п)


















 
